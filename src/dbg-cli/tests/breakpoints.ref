<command> <subcommand> [parameter [parameter...]]
Example: `breakpoint iset 1` sets breakpoint at address 1.

For help, use the `help <command>` syntax, for example
`help breakpoint`, or `help disassemble`.

Every command has its subcommands unless explicitly specified.
Some of the commands work with or without subcommands.

commands:
- help = Display help message about subcommands.
- run = Run the program.
- attach <port> = Attach to an already running VM.
- continue = Continue execution.
- breakpoint = Stop the program at various points.
- istep = Execute one instruction.
- step = Execute one source line.
- inext = Step over call instructions.
- next = Step over function calls.
- finish = Leave current function.
- disassemble = Disassemble the underlying native code.
- assemble = Rewrite the underlying native code.
- register = Read and write to registers.
- watchpoint = Watch for writes to values in memory.
- frame = Print information about current function and variables.
- expression = Evaluate the source language expression and print result.
- source = Print the source code that is being debugged.
Use the `run` or `attach` command to run a process first.
Started process 'dbg-cli/tests/sources/swap.t86'
Breakpoint set on address 2: 'MOV R0, [R2]'
Breakpoint set on line 8 (addr 7):     int a = 3;
Breakpoint set on address 10: 'LEA R3, [SP + -3]'
Process stopped, reason: Software breakpoint hit at line 8
function main at 7-18; active variables: a, b
      6:
      7:int main() {
@->   8:    int a = 3;
      9:    int b = 6;
     10:    swap(&a, &b);
Process stopped, reason: Software breakpoint hit at address 10
function main at 7-18; active variables: a, b
      8:  MOV [SP + -3], 6
      9:  LEA R2, [SP + -2]
@->  10:  LEA R3, [SP + -3]
     11:  CALL 2
     12:  MOV R0, [SP + -2]
Process stopped, reason: Software breakpoint hit at line 2
function swap at 2-7; active variables: tmp, x, y
      1:void swap(int* x, int* y) {
@->   2:    int tmp = *x;
      3:    *x = *y;
      4:    *y = tmp;
Breakpoint set on address 1: 'HALT'
6
3
Process stopped, reason: Software breakpoint hit at address 1
      0:  CALL 7
@->   1:  HALT
@     2:  MOV R0, [R2]
      3:  MOV R1, [R3]
Process stopped, reason: The program finished execution
