<command> <subcommand> [parameter [parameter...]]
Example: `breakpoint set-addr 1` sets breakpoint at address 1.

For help, use the `<command> help` syntax, for example
`breakpoint help`, or `disassemble help`.

Every command has its subcommands unless explicitly specified.
Some of the commands work with or without subcommands.

commands:
- continue = Continues execution, has no subcommands.
- istep = Assembly level stepping.
- step = Source level stepping.
- disassemble = Disassemble the underlying native code.
- assemble = Rewrite the underlying native code.
- breakpoint = Add and remove breakpoints.
- register = Read and write to registers.
- run = Run the program, has no subcommands.
- attach <port> = Attach to an already running VM, has no subcommands.
- frame = Print information about current function and variables, has no subcommads.
- expression = Evaluate the source language expression and print result.
- source = Print the source code that is being debugged.
Use the `run` or `attach` command to run a process first.
Started process 'tests/sources/swap.t86'
Breakpoint set on address 2: 'MOV R0, [R2]'
Breakpoint set on line 7 (addr 7):     int a = 3;
Breakpoint set on address 10: 'LEA R3, [SP + -3]'
Process stopped, reason: Software breakpoint hit at line 7
function main at 7-18; active variables: a, b
      5:
      6:int main() {
@->   7:    int a = 3;
      8:    int b = 6;
      9:    swap(&a, &b);
Process stopped, reason: Software breakpoint hit at address 10
function main at 7-18; active variables: a, b
      8:  MOV [SP + -3], 6
      9:  LEA R2, [SP + -2]
@->  10:  LEA R3, [SP + -3]
     11:  CALL 2
     12:  MOV R0, [SP + -2]
Process stopped, reason: Software breakpoint hit at line 1
function swap at 2-7; active variables: tmp, x, y
      0:void swap(int* x, int* y) {
@->   1:    int tmp = *x;
      2:    *x = *y;
      3:    *y = tmp;
Breakpoint set on address 1: 'HALT'
6
3
Process stopped, reason: Software breakpoint hit at address 1
      0:  CALL 7
@->   1:  HALT
@     2:  MOV R0, [R2]
      3:  MOV R1, [R3]
Process stopped, reason: The program finished execution
